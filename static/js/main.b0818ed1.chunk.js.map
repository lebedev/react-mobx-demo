{"version":3,"sources":["Box.js","ContainerButton.js","Container.js","validate.js","StateReadWriter.js","App.js","index.js"],"names":["Box","state","isPickerShown","newColor","_this","props","element","color","storeNewColor","hex","showPicker","setState","hidePicker","changeColor","remove","parent","react_default","a","createElement","react","this","className","onClick","style","backgroundColor","lib","onChangeComplete","onAccept","onCancel","Component","observer","ContainerButton","addBox","addContainer","Container","addElement","undefined","children","src_ContainerButton_0","flatStringify","obj","JSON","stringify","key","value","Array","isArray","replace","validateState","Error","concat","type","unrecognizedKeysSet","Set","Object","keys","delete","size","toConsumableArray","join","items","forEach","tinycolor","_ok","StateReadWriter","stringifiedState","stateInput","createRef","stringifyCurrentState","rootElement","parseNewState","current","newState","parse","replaceRoot","e","alert","ref","readOnly","App","targetElement","push","changeBoxColor","box","splice","indexOf","renderElement","index","arguments","length","src_Container_0","map","child","src_Box_0","newRootElement","src_StateReadWriter_0","decorate","observable","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b0818ed1.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { observer } from 'mobx-react';\nimport { PhotoshopPicker } from 'react-color';\nimport './Box.css';\n\nclass Box extends Component {\n    state = {\n        isPickerShown: false,\n    };\n\n    newColor = this.props.element.color || 'orange';\n\n    storeNewColor = (newColor) => this.newColor = newColor.hex;\n\n    showPicker = () => this.setState({ isPickerShown: true });\n\n    hidePicker = () => this.setState({ isPickerShown: false });\n\n    changeColor = () => {\n        this.hidePicker();\n        this.props.changeColor(this.props.element, this.newColor);\n    };\n\n    remove = () => this.props.remove(this.props.parent, this.props.element);\n\n    render() {\n        return (\n            <Fragment>\n                {\n                    this.state.isPickerShown ? (\n                        <div\n                            className=\"PickerOverlay\"\n                            onClick={this.hidePicker}\n                        />\n                    ) : null\n                }\n                <div\n                    className=\"Box\"\n                    style={{\n                        backgroundColor: this.props.element.color || 'orange',\n                    }}\n                >\n                    {\n                        this.state.isPickerShown ? (\n                            <div className=\"PickerContainer\">\n                                <PhotoshopPicker\n                                    color={this.props.element.color || 'orange'}\n                                    onChangeComplete={this.storeNewColor}\n                                    onAccept={this.changeColor}\n                                    onCancel={this.hidePicker}\n                                />\n                            </div>\n                        ) : null\n                    }\n                    <div className=\"FloatingButtons\">\n                        <button\n                            className=\"ActionButton\"\n                            onClick={this.showPicker}\n                        >\n                            Change Color\n                        </button>\n                        {\n                            this.props.parent ? (\n                                <button\n                                    className=\"ActionButton\"\n                                    onClick={this.remove}\n                                >\n                                    Remove\n                                </button>\n                            ) : null\n                        }\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default observer(Box);\n","import React, { Component } from 'react';\nimport './ContainerButton.css';\n\nclass ContainerButton extends Component {\n    render() {\n        return (\n            <div className=\"ButtonContainer\">\n                <div className=\"FloatingButtons\">\n                    <button\n                        className=\"ActionButton\"\n                        onClick={this.props.addBox}\n                    >\n                        Add a Box\n                    </button>\n                    <button\n                        className=\"ActionButton\"\n                        onClick={this.props.addContainer}\n                    >\n                        Add a Container\n                    </button>\n                    {\n                        this.props.remove ? (\n                            <button\n                                className=\"ActionButton\"\n                                onClick={this.props.remove}\n                            >\n                                Remove\n                            </button>\n                        ) : null\n                    }\n                </div>\n                <button className=\"ActionButton\">\n                    Action\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default ContainerButton;\n","import React, { Component } from 'react';\nimport './Container.css';\n\nimport ContainerButton from './ContainerButton';\n\nclass Container extends Component {\n    addBox = () => this.props.addElement(this.props.element, 'box');\n\n    addContainer = () => this.props.addElement(this.props.element, 'container');\n\n    remove = this.props.parent ? () => this.props.remove(this.props.parent, this.props.element) : undefined;\n\n    render() {\n        return (\n            <div className=\"Container\">\n                {this.props.children}\n                <ContainerButton\n                    addBox={this.addBox}\n                    addContainer={this.addContainer}\n                    remove={this.remove}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Container;\n","import tinycolor from 'tinycolor2';\n\nconst flatStringify = (obj) => JSON.stringify(obj, (key, value) => {\n    if (key && Array.isArray(value)) {\n        return [];\n    } else if (key && value && typeof value === 'object') {\n        return {};\n    } else {\n        return value;\n    }\n}).replace(/\\[]/g, '[...]').replace(/\\{}/g, '{...}');\n\nconst validateState = (state) => {\n    if ('type' in state) {\n        switch (state.type) {\n            case 'container': {\n                const unrecognizedKeysSet = new Set(Object.keys(state));\n                unrecognizedKeysSet.delete('type');\n                unrecognizedKeysSet.delete('items');\n\n                if (unrecognizedKeysSet.size !== 0) {\n                    throw new Error(`Unrecognized key${unrecognizedKeysSet.size > 1 ? 's' : ''} \"${[...unrecognizedKeysSet].join('\", \"')}\" in container ${flatStringify(state)}.`);\n                }\n\n                if (!('items' in state)) {\n                    throw new Error(`No items in container ${flatStringify(state)}.`);\n                }\n\n                if (!Array.isArray(state.items)) {\n                    throw new Error(`Unrecognized items ${flatStringify(state.items)} in container ${flatStringify(state)}.`);\n                }\n\n                state.items.forEach(validateState);\n\n                break;\n            }\n\n            case 'box': {\n                const unrecognizedKeysSet = new Set(Object.keys(state));\n                unrecognizedKeysSet.delete('type');\n                unrecognizedKeysSet.delete('color');\n\n                if (unrecognizedKeysSet.size !== 0) {\n                    throw new Error(`Unrecognized key${unrecognizedKeysSet.size > 1 ? 's' : ''} \"${[...unrecognizedKeysSet].join('\", \"')}\" in box ${flatStringify(state)}.`);\n                }\n\n                if ('color' in state && (typeof state.color !== 'string' || !tinycolor(state.color)._ok)) {\n                    throw new Error(`Unrecognized color ${flatStringify(state.color)} in box ${flatStringify(state)}.`);\n                }\n\n                break;\n            }\n\n            default:\n                throw new Error(`Unrecognized type \"${state.type}\" in ${flatStringify(state)}.`);\n        }\n    } else {\n        throw new Error(`No type in ${flatStringify(state)}.`);\n    }\n};\n\nexport default validateState;\n","import React, { createRef, Fragment, Component } from 'react';\nimport './StateReadWriter.css';\n\nimport validateState from './validate';\n\nclass StateReadWriter extends Component {\n    state = {\n        stringifiedState: '',\n    };\n\n    stateInput = createRef();\n\n    stringifyCurrentState = () => this.setState({ stringifiedState: JSON.stringify(this.props.rootElement) });\n\n    parseNewState = () => {\n        const { current } = this.stateInput;\n\n        if (current) {\n            try {\n                const newState = JSON.parse(current.value);\n\n                validateState(newState);\n\n                this.props.replaceRoot(newState);\n                current.value = '';\n            } catch (e) {\n                alert(e);\n            }\n        }\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div>\n                    <input ref={this.stateInput} type=\"text\" />\n                    <button onClick={this.parseNewState}>\n                        Build\n                    </button>\n                </div>\n                <div>\n                    <input type=\"text\" readOnly=\"readonly\" value={this.state.stringifiedState} className=\"ReadInput\"/>\n                    <button onClick={this.stringifyCurrentState}>\n                        Create JSON\n                    </button>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default StateReadWriter;\n","import React, { Component } from 'react';\nimport { observable, decorate } from 'mobx';\nimport { observer } from 'mobx-react';\n\nimport 'normalize.css';\nimport './App.css';\n\nimport Box from './Box';\nimport Container from './Container';\nimport StateReadWriter from './StateReadWriter';\n\nclass App extends Component {\n    rootElement = {\n        type: 'container',\n        items: [],\n    };\n\n    addElement = (targetElement, type) => {\n        targetElement.items.push(\n            type === 'box' ? {\n                type: 'box'\n            } : {\n                type: 'container',\n                items: [],\n            }\n        );\n    };\n\n    changeBoxColor = (box, newColor) => {\n        box.color = newColor;\n    };\n\n    remove = (parent, element) => {\n        parent.items.splice(parent.items.indexOf(element), 1);\n    };\n\n    renderElement = (element, index = 0, parent) => {\n        switch (element.type) {\n            case 'container': return (\n                <Container\n                    key={index}\n                    element={element}\n                    parent={parent}\n                    addElement={this.addElement}\n                    remove={this.remove}\n                >\n                    {element.items.map((child, index) => this.renderElement(child, index, element))}\n                </Container>\n            );\n\n            case 'box': return (\n                <Box\n                    key={index}\n                    element={element}\n                    parent={parent}\n                    changeColor={this.changeBoxColor}\n                    remove={this.remove}\n                />\n            );\n\n            default:\n                throw new Error('This should\\'ve never happened.');\n        }\n    };\n\n    replaceRoot = (newRootElement) => this.rootElement = newRootElement;\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.renderElement(this.rootElement)}\n                <StateReadWriter\n                    rootElement={this.rootElement}\n                    replaceRoot={this.replaceRoot}\n                />\n            </div>\n        );\n    }\n}\n\ndecorate(App, {\n    rootElement: observable,\n});\n\nexport default observer(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}